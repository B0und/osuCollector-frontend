swagger: "2.0"
info:
  description: "Upload and get osu collections"
  version: "1.0.0"
  title: "osu! Collector"
  contact:
    email: "junarvi@yahoo.ca"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "osucollector.com"
basePath: "/api"
schemes:
- "https"
- "http"
paths:
  /collections/recent:
    get:
      summary: "Gets the most recent collections from the server"
      description: "Gets the most recent collections from the server"
      operationId: "getRecentCollections"
      consumes:
      - "application/json"
      parameters:
      - name: "range"
        in: "body"
        description: "The below example retrieves 10 beatmaps with indices [20-29] in the most recent beatmaps list"
        required: true
        schema:
          $ref: "#/definitions/RequiredRangeParameters"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CollectionData"
        "400":
          description: "Invalid JSON"
      security: []
  /collections/popular:
    get:
      summary: "Gets the most popular collections from the server"
      description: "Gets the most popular collections from the server"
      operationId: "getPopularCollections"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "dateRange must be one of {'daily', 'weekly', 'monthly', 'all'}"
        required: true
        schema:
          $ref: "#/definitions/RangeParametersWithDate"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CollectionData"
        "400":
          description: "Invalid JSON"
      security: []
  /collections/upload:
    post:
      summary: "Upload an array of collections to the server"
      description: "If any collection already exists on the server (same uploader, same collection name), then the collection on the server is updated"
      operationId: "uploadCollections"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Uploader metadata along with list of collections to upload"
        required: true
        schema:
          $ref: "#/definitions/CollectionsUploadData"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Upload success"
          schema:
            properties:
              collectionId:
                type: "string"
                example: "60b116f010fac234f45ce4e0"
              collectionsCreated:
                type: "integer"
                format: "int32"
              collectionsUpdated:
                type: "integer"
                format: "int32"
        "400":
          description: "Invalid JSON"
      security: []
  /{userId}/collections:
    get:
      summary: "Gets a specific user's collections"
      description: "Gets a specific user's collections"
      operationId: "getUserCollections"
      consumes:
      - "application/json"
      parameters:
      - name: userId
        in: path
        required: true
        type : "string"
      - in: "body"
        name: "body"
        description: "Parameters"
        required: true
        schema:
          $ref: "#/definitions/RangeParameters"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CollectionData"
        "400":
          description: "Invalid JSON"
      security: []
  /collections/{collectionId}:
    get:
      summary: "Get a collection"
      description: "Gets a collection"
      operationId: "getCollection"
      parameters:
      - name: collectionId
        in: path
        required: true
        type: integer
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CollectionData"
        "404":
          description: "Collection does not exist"
      security: []
    put:
      summary: "Update a collection"
      description: "Updates a collection"
      operationId: "updateCollection"
      parameters:
      - name: collectionId
        in: path
        required: true
        type: integer
      - in: "body"
        name: "collectionData"
        description: "Data to update the collection with"
        required: true
        schema:
          $ref: "#/definitions/CollectionUploadData"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
        "404":
          description: "Collection does not exist"
        "400":
          description: "Invalid JSON"
    delete:
      summary: "Delete a collection"
      description: "Deletes a collection"
      operationId: "deleteCollection"
      parameters:
      - name: collectionId
        in: path
        required: true
        type: integer
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
        "404":
          description: "Collection does not exist"
      security: []
  /collections/{collectionId}/like:
    post:
      summary: "Like a collection"
      description: "Adds one like to a collection. Can also be used to remove an existing like"
      operationId: "likeCollection"
      consumes:
      - "application/json"
      parameters:
      - name: collectionId
        in: path
        required: true
        type : integer
      - name: "body"
        in: "body"
        description: "By setting like: false, the like is removed if it exists."
        required: true
        schema:
          $ref: "#/definitions/LikeData"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Like success"
        "404":
          description: "Collection does not exist"
        "400":
          description: "Invalid JSON"
      security: []
  /collections/{collectionId}/beatmaps:
    get:
      summary: "Gets the beatmaps under this collection"
      description: "Gets the beatmaps under this collection"
      operationId: "getCollectionBeatmaps"
      consumes:
      - "application/json"
      parameters:
      - name: collectionId
        in: path
        required: true
        type : integer
      - name: "range"
        in: "body"
        description: "Adjust these parameters to get a partial list of beatmaps in the collection. Leave blank to retrieve all beatmaps."
        schema:
          $ref: "#/definitions/RangeParameters"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BeatmapData"
        "404":
          description: "Collection does not exist"
        "400":
          description: "Invalid JSON"
      security: []
  /collections/{collectionId}/comment:
    post:
      summary: "Posts a comment on a collection"
      description: "Posts a comment on a collection"
      operationId: "postCollectionComment"
      consumes:
      - "application/json"
      parameters:
      - name: collectionId
        in: path
        required: true
        type : integer
      - name: "body"
        in: "body"
        description: "TODO: allow guest comments"
        required: true
        schema:
          $ref: "#/definitions/CommentData"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Comment posted"
        "404":
          description: "Collection does not exist"
        "400":
          description: "Invalid JSON"
      security: []
definitions:
  CollectionData:
    properties:
      name:
        type: "string"
        example: "top 100 tech maps of All Time"
      description:
        type: "string"
        example: "this is a very cool collection"
      uploader:
        type: "string"
        example: "FunOrange"
      uploaderId:
        type: "integer"
        format: "int32"
        example: 2051389
      beatmapCount:
        type: "integer"
        example: 14
      processingBeatmapCount:
        type: "integer"
        example: 1
      unsubmittedBeatmapCount:
        type: "integer"
        example: 3
      likes:
        type: "integer"
        format: "int64"
        example: 964
      comments:
        type: "array"
        items:
          $ref: "#/definitions/CommentData"
  CollectionsUploadData:
    required:
    - "uploader"
    properties:
      uploader:
        type: "string"
        example: "funorange"
      description:
        type: "string"
        example: "This is my collection"
      uploaderId:
        type: "integer"
        format: "int32"
        example: 2051389
      collections:
        type: "array"
        items:
          $ref: "#/definitions/CollectionUploadData"
  CollectionUploadData:
    properties:
      name:
        type: "string"
        example: "jump spam"
      description:
        type: "string"
        example: "this is the best collection"
      beatmaps:
        type: "array"
        items:
          properties:
            beatmapMd5:
              type: "string"
            beatmapId:
              type: "integer"
              format: "int32"
    
  BeatmapData:
    properties:
      difficulty_rating:
        type: "number"
      id:
        type: "number"
      total_length:
        type: "number"
      user_id:
        type: "number"
      version:
        type: "string"
      accuracy:
        type: "number"
      ar:
        type: "number"
      beatmapset_id:
        type: "number"
      bpm:
        type: "number"
      count_circles:
        type: "number"
      count_sliders:
        type: "number"
      count_spinners:
        type: "number"
      cs:
        type: "number"
      drain:
        type: "number"
      hit_length:
        type: "number"
      last_updated:
        type: "integer"
        format: "int64"
      mode_int:
        type: "number"
      playcount:
        type: "number"
      ranked:
        type: "number"
      url:
        type: "string"
      checksum:
        type: "string"
      max_combo:
        type: "number"
      beatmapset:
          properties:
            artist:
              type: "string"
            artist_unicode:
              type: "string"
            covers:
              properties:
                cover:
                  type: "string"
                cover@2x:
                  type: "string"
                card:
                  type: "string"
                card@2x:
                  type: "string"
                list:
                  type: "string"
                list@2x:
                  type: "string"
                slimcover:
                  type: "string"
                slimcover@2x:
                  type: "string"
            creator:
              type: "string"
            favourite_count:
              type: "number"
            id:
              type: "number"
            nsfw:
              type: "boolean"
            play_count:
              type: "number"
            preview_url:
              type: "string"
            source:
              type: "string"
            title:
              type: "string"
            title_unicode:
              type: "string"
            user_id:
              type: "number"
            video:
              type: "boolean"
            availability:
              properties:
                download_disabled:
                  type: "boolean"
                more_information:
                  type: "string"
            bpm:
              type: "number"
            last_updated:
              type: "integer"
              format: "int64"
            ranked:
              type: "number"
            ranked_date:
              type: "integer"
              format: "int64"
            submitted_date:
              type: "integer"
              format: "int64"
            tags:
              type: "string"
  LikeData:
    required:
    - "osuUserId"
    - "like"
    properties:
      osuUserId:
        type: "integer"
        format: "int64"
        description: "osuUserId 0 is reserved for guests"
        example: 2051389
      like:
        type: "boolean"
        example: true
  CommentData:
    required:
    - "username"
    - "userId"
    - "comment"
    properties:
      username:
        type: "integer"
        format: "int64"
        example: "FunOrange"
      userId:
        type: "integer"
        format: "int64"
        description: "osu user id. osuUserId 0 is reserved for guests"
        example: 2051389
      comment:
        type: "string"
        example: "This collection sucks"
      datePosted:
        type: "string"
        example: "2021-06-14T19:58:04.436+00:00"
  RangeParameters:
    properties:
      startFrom:
        type: "integer"
        format: "int64"
        example: 0
      count:
        type: "integer"
        format: "int64"
        example: 10
  RequiredRangeParameters:
    required:
    - "startFrom"
    - "count"
    properties:
      startFrom:
        type: "integer"
        format: "int64"
        example: 20
      count:
        type: "integer"
        format: "int64"
        example: 10
  RangeParametersWithDate:
    required:
    - "dateRange"
    - "startFrom"
    - "count"
    properties:
      dateRange:
        type: "string"
        example: "allTime"
      startFrom:
        type: "integer"
        format: "int64"
        example: 0
      count:
        type: "integer"
        format: "int64"
        example: 10
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"