/*
 * osu! Collector
 * Upload and get osu collections
 *
 * OpenAPI spec version: 1.0.0
 * Contact: junarvi@yahoo.ca
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OsuCollector);
  }
}(this, function(expect, OsuCollector) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BeatmapData', function() {
      beforeEach(function() {
        instance = new OsuCollector.BeatmapData();
      });

      it('should create an instance of BeatmapData', function() {
        // TODO: update the code to test BeatmapData
        expect(instance).to.be.a(OsuCollector.BeatmapData);
      });

      it('should have the property difficultyRating (base name: "difficulty_rating")', function() {
        // TODO: update the code to test the property difficultyRating
        expect(instance).to.have.property('difficultyRating');
        // expect(instance.difficultyRating).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property totalLength (base name: "total_length")', function() {
        // TODO: update the code to test the property totalLength
        expect(instance).to.have.property('totalLength');
        // expect(instance.totalLength).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "user_id")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property accuracy (base name: "accuracy")', function() {
        // TODO: update the code to test the property accuracy
        expect(instance).to.have.property('accuracy');
        // expect(instance.accuracy).to.be(expectedValueLiteral);
      });

      it('should have the property ar (base name: "ar")', function() {
        // TODO: update the code to test the property ar
        expect(instance).to.have.property('ar');
        // expect(instance.ar).to.be(expectedValueLiteral);
      });

      it('should have the property beatmapsetId (base name: "beatmapset_id")', function() {
        // TODO: update the code to test the property beatmapsetId
        expect(instance).to.have.property('beatmapsetId');
        // expect(instance.beatmapsetId).to.be(expectedValueLiteral);
      });

      it('should have the property bpm (base name: "bpm")', function() {
        // TODO: update the code to test the property bpm
        expect(instance).to.have.property('bpm');
        // expect(instance.bpm).to.be(expectedValueLiteral);
      });

      it('should have the property countCircles (base name: "count_circles")', function() {
        // TODO: update the code to test the property countCircles
        expect(instance).to.have.property('countCircles');
        // expect(instance.countCircles).to.be(expectedValueLiteral);
      });

      it('should have the property countSliders (base name: "count_sliders")', function() {
        // TODO: update the code to test the property countSliders
        expect(instance).to.have.property('countSliders');
        // expect(instance.countSliders).to.be(expectedValueLiteral);
      });

      it('should have the property countSpinners (base name: "count_spinners")', function() {
        // TODO: update the code to test the property countSpinners
        expect(instance).to.have.property('countSpinners');
        // expect(instance.countSpinners).to.be(expectedValueLiteral);
      });

      it('should have the property cs (base name: "cs")', function() {
        // TODO: update the code to test the property cs
        expect(instance).to.have.property('cs');
        // expect(instance.cs).to.be(expectedValueLiteral);
      });

      it('should have the property drain (base name: "drain")', function() {
        // TODO: update the code to test the property drain
        expect(instance).to.have.property('drain');
        // expect(instance.drain).to.be(expectedValueLiteral);
      });

      it('should have the property hitLength (base name: "hit_length")', function() {
        // TODO: update the code to test the property hitLength
        expect(instance).to.have.property('hitLength');
        // expect(instance.hitLength).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "last_updated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property modeInt (base name: "mode_int")', function() {
        // TODO: update the code to test the property modeInt
        expect(instance).to.have.property('modeInt');
        // expect(instance.modeInt).to.be(expectedValueLiteral);
      });

      it('should have the property playcount (base name: "playcount")', function() {
        // TODO: update the code to test the property playcount
        expect(instance).to.have.property('playcount');
        // expect(instance.playcount).to.be(expectedValueLiteral);
      });

      it('should have the property ranked (base name: "ranked")', function() {
        // TODO: update the code to test the property ranked
        expect(instance).to.have.property('ranked');
        // expect(instance.ranked).to.be(expectedValueLiteral);
      });

      it('should have the property url (base name: "url")', function() {
        // TODO: update the code to test the property url
        expect(instance).to.have.property('url');
        // expect(instance.url).to.be(expectedValueLiteral);
      });

      it('should have the property checksum (base name: "checksum")', function() {
        // TODO: update the code to test the property checksum
        expect(instance).to.have.property('checksum');
        // expect(instance.checksum).to.be(expectedValueLiteral);
      });

      it('should have the property maxCombo (base name: "max_combo")', function() {
        // TODO: update the code to test the property maxCombo
        expect(instance).to.have.property('maxCombo');
        // expect(instance.maxCombo).to.be(expectedValueLiteral);
      });

      it('should have the property beatmapset (base name: "beatmapset")', function() {
        // TODO: update the code to test the property beatmapset
        expect(instance).to.have.property('beatmapset');
        // expect(instance.beatmapset).to.be(expectedValueLiteral);
      });

    });
  });

}));
