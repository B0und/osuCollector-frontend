/*
 * osu! Collector
 * Upload and get osu collections
 *
 * OpenAPI spec version: 1.0.0
 * Contact: junarvi@yahoo.ca
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OsuCollector);
  }
}(this, function(expect, OsuCollector) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OsuCollector.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('deleteCollection', function() {
        it('should call deleteCollection successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCollection call
          /*
          var collectionId = 56;

          instance.deleteCollection(collectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCollection', function() {
        it('should call getCollection successfully', function(done) {
          // TODO: uncomment, update parameter values for getCollection call and complete the assertions
          /*
          var collectionId = 56;

          instance.getCollection(collectionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OsuCollector.CollectionData);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("top 100 tech maps of All Time");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("this is a very cool collection");
            expect(data.uploader).to.be.a('string');
            expect(data.uploader).to.be("FunOrange");
            expect(data.uploaderId).to.be.a('number');
            expect(data.uploaderId).to.be(2051389);
            expect(data.likes).to.be.a('number');
            expect(data.likes).to.be(964);
            {
              let dataCtr = data.comments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(OsuCollector.CommentData);
                expect(data.username).to.be.a('number');
                expect(data.username).to.be(FunOrange);
                expect(data.userId).to.be.a('number');
                expect(data.userId).to.be(2051389);
                expect(data.comment).to.be.a('string');
                expect(data.comment).to.be("This collection sucks");
                expect(data.datePosted).to.be.a('string');
                expect(data.datePosted).to.be("2021-06-14T19:58:04.436+00:00");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCollectionBeatmaps', function() {
        it('should call getCollectionBeatmaps successfully', function(done) {
          // TODO: uncomment, update parameter values for getCollectionBeatmaps call and complete the assertions
          /*
          var collectionId = 56;
          var opts = {};
          opts.range = new OsuCollector.RangeParameters();
          opts.range.startFrom = 0;
          opts.range.count = 10;

          instance.getCollectionBeatmaps(collectionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OsuCollector.BeatmapData);
              expect(data.difficultyRating).to.be.a('number');
              expect(data.difficultyRating).to.be();
              expect(data.id).to.be.a('number');
              expect(data.id).to.be();
              expect(data.totalLength).to.be.a('number');
              expect(data.totalLength).to.be();
              expect(data.userId).to.be.a('number');
              expect(data.userId).to.be();
              expect(data.version).to.be.a('string');
              expect(data.version).to.be("");
              expect(data.accuracy).to.be.a('number');
              expect(data.accuracy).to.be();
              expect(data.ar).to.be.a('number');
              expect(data.ar).to.be();
              expect(data.beatmapsetId).to.be.a('number');
              expect(data.beatmapsetId).to.be();
              expect(data.bpm).to.be.a('number');
              expect(data.bpm).to.be();
              expect(data.countCircles).to.be.a('number');
              expect(data.countCircles).to.be();
              expect(data.countSliders).to.be.a('number');
              expect(data.countSliders).to.be();
              expect(data.countSpinners).to.be.a('number');
              expect(data.countSpinners).to.be();
              expect(data.cs).to.be.a('number');
              expect(data.cs).to.be();
              expect(data.drain).to.be.a('number');
              expect(data.drain).to.be();
              expect(data.hitLength).to.be.a('number');
              expect(data.hitLength).to.be();
              expect(data.lastUpdated).to.be.a('number');
              expect(data.lastUpdated).to.be("0");
              expect(data.modeInt).to.be.a('number');
              expect(data.modeInt).to.be();
              expect(data.playcount).to.be.a('number');
              expect(data.playcount).to.be();
              expect(data.ranked).to.be.a('number');
              expect(data.ranked).to.be();
              expect(data.url).to.be.a('string');
              expect(data.url).to.be("");
              expect(data.checksum).to.be.a('string');
              expect(data.checksum).to.be("");
              expect(data.maxCombo).to.be.a('number');
              expect(data.maxCombo).to.be();
              expect(data.beatmapset).to.be.a(Object);
              expect(data.beatmapset).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPopularCollections', function() {
        it('should call getPopularCollections successfully', function(done) {
          // TODO: uncomment, update parameter values for getPopularCollections call and complete the assertions
          /*
          var body = new OsuCollector.RangeParametersWithDate();
          body.dateRange = "allTime";
          body.startFrom = 0;
          body.count = 10;

          instance.getPopularCollections(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OsuCollector.CollectionData);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("top 100 tech maps of All Time");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("this is a very cool collection");
              expect(data.uploader).to.be.a('string');
              expect(data.uploader).to.be("FunOrange");
              expect(data.uploaderId).to.be.a('number');
              expect(data.uploaderId).to.be(2051389);
              expect(data.likes).to.be.a('number');
              expect(data.likes).to.be(964);
              {
                let dataCtr = data.comments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(OsuCollector.CommentData);
                  expect(data.username).to.be.a('number');
                  expect(data.username).to.be(FunOrange);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(2051389);
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("This collection sucks");
                  expect(data.datePosted).to.be.a('string');
                  expect(data.datePosted).to.be("2021-06-14T19:58:04.436+00:00");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRecentCollections', function() {
        it('should call getRecentCollections successfully', function(done) {
          // TODO: uncomment, update parameter values for getRecentCollections call and complete the assertions
          /*
          var range = new OsuCollector.RequiredRangeParameters();
          range.startFrom = 20;
          range.count = 10;

          instance.getRecentCollections(range, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OsuCollector.CollectionData);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("top 100 tech maps of All Time");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("this is a very cool collection");
              expect(data.uploader).to.be.a('string');
              expect(data.uploader).to.be("FunOrange");
              expect(data.uploaderId).to.be.a('number');
              expect(data.uploaderId).to.be(2051389);
              expect(data.likes).to.be.a('number');
              expect(data.likes).to.be(964);
              {
                let dataCtr = data.comments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(OsuCollector.CommentData);
                  expect(data.username).to.be.a('number');
                  expect(data.username).to.be(FunOrange);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(2051389);
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("This collection sucks");
                  expect(data.datePosted).to.be.a('string');
                  expect(data.datePosted).to.be("2021-06-14T19:58:04.436+00:00");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserCollections', function() {
        it('should call getUserCollections successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserCollections call and complete the assertions
          /*
          var userId = "userId_example";
          var body = new OsuCollector.RangeParameters();
          body.startFrom = 0;
          body.count = 10;

          instance.getUserCollections(userId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OsuCollector.CollectionData);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("top 100 tech maps of All Time");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("this is a very cool collection");
              expect(data.uploader).to.be.a('string');
              expect(data.uploader).to.be("FunOrange");
              expect(data.uploaderId).to.be.a('number');
              expect(data.uploaderId).to.be(2051389);
              expect(data.likes).to.be.a('number');
              expect(data.likes).to.be(964);
              {
                let dataCtr = data.comments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(OsuCollector.CommentData);
                  expect(data.username).to.be.a('number');
                  expect(data.username).to.be(FunOrange);
                  expect(data.userId).to.be.a('number');
                  expect(data.userId).to.be(2051389);
                  expect(data.comment).to.be.a('string');
                  expect(data.comment).to.be("This collection sucks");
                  expect(data.datePosted).to.be.a('string');
                  expect(data.datePosted).to.be("2021-06-14T19:58:04.436+00:00");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('likeCollection', function() {
        it('should call likeCollection successfully', function(done) {
          // TODO: uncomment, update parameter values for likeCollection call
          /*
          var collectionId = 56;
          var body = new OsuCollector.LikeData();
          body.osuUserId = 2051389;
          body.like = true;

          instance.likeCollection(collectionId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCollectionComment', function() {
        it('should call postCollectionComment successfully', function(done) {
          // TODO: uncomment, update parameter values for postCollectionComment call
          /*
          var collectionId = 56;
          var body = new OsuCollector.CommentData();
          body.username = FunOrange;
          body.userId = 2051389;
          body.comment = "This collection sucks";
          body.datePosted = "2021-06-14T19:58:04.436+00:00";

          instance.postCollectionComment(collectionId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateCollection', function() {
        it('should call updateCollection successfully', function(done) {
          // TODO: uncomment, update parameter values for updateCollection call
          /*
          var collectionId = 56;
          var collectionData = new OsuCollector.CollectionUploadData();
          collectionData.name = "jump spam";
          collectionData.description = "this is the best collection";
          collectionData.beatmaps = [];

          instance.updateCollection(collectionId, collectionData, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadCollections', function() {
        it('should call uploadCollections successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadCollections call and complete the assertions
          /*
          var body = new OsuCollector.CollectionsUploadData();
          body.uploader = "funorange";
          body.description = "This is my collection";
          body.uploaderId = 2051389;
          body.collections = [new OsuCollector.CollectionUploadData()];
          body.collections[0].name = "jump spam";
          body.collections[0].description = "this is the best collection";
          body.collections[0].beatmaps = [];

          instance.uploadCollections(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
