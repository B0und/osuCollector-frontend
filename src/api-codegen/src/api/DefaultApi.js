/*
 * osu! Collector
 * Upload and get osu collections
 *
 * OpenAPI spec version: 1.0.0
 * Contact: junarvi@yahoo.ca
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BeatmapData', 'model/CollectionData', 'model/CollectionUploadData', 'model/CollectionsUploadData', 'model/CommentData', 'model/LikeData', 'model/RangeParameters', 'model/RangeParametersWithDate', 'model/RequiredRangeParameters'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BeatmapData'), require('../model/CollectionData'), require('../model/CollectionUploadData'), require('../model/CollectionsUploadData'), require('../model/CommentData'), require('../model/LikeData'), require('../model/RangeParameters'), require('../model/RangeParametersWithDate'), require('../model/RequiredRangeParameters'));
  } else {
    // Browser globals (root is window)
    if (!root.OsuCollector) {
      root.OsuCollector = {};
    }
    root.OsuCollector.DefaultApi = factory(root.OsuCollector.ApiClient, root.OsuCollector.BeatmapData, root.OsuCollector.CollectionData, root.OsuCollector.CollectionUploadData, root.OsuCollector.CollectionsUploadData, root.OsuCollector.CommentData, root.OsuCollector.LikeData, root.OsuCollector.RangeParameters, root.OsuCollector.RangeParametersWithDate, root.OsuCollector.RequiredRangeParameters);
  }
}(this, function(ApiClient, BeatmapData, CollectionData, CollectionUploadData, CollectionsUploadData, CommentData, LikeData, RangeParameters, RangeParametersWithDate, RequiredRangeParameters) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/DefaultApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a collection
     * Deletes a collection
     * @param {Number} collectionId 
     * @param {module:api/DefaultApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCollection = function(collectionId, callback) {
      var postBody = null;

      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteCollection");
      }


      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/collections/{collectionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollection operation.
     * @callback module:api/DefaultApi~getCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a collection
     * Gets a collection
     * @param {Number} collectionId 
     * @param {module:api/DefaultApi~getCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionData}
     */
    this.getCollection = function(collectionId, callback) {
      var postBody = null;

      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollection");
      }


      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CollectionData;

      return this.apiClient.callApi(
        '/collections/{collectionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionBeatmaps operation.
     * @callback module:api/DefaultApi~getCollectionBeatmapsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BeatmapData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the beatmaps under this collection
     * Gets the beatmaps under this collection
     * @param {Number} collectionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/RangeParameters} opts.range Adjust these parameters to get a partial list of beatmaps in the collection. Leave blank to retrieve all beatmaps.
     * @param {module:api/DefaultApi~getCollectionBeatmapsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BeatmapData>}
     */
    this.getCollectionBeatmaps = function(collectionId, opts, callback) {
      opts = opts || {};
      var postBody = opts['range'];

      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionBeatmaps");
      }


      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BeatmapData];

      return this.apiClient.callApi(
        '/collections/{collectionId}/beatmaps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopularCollections operation.
     * @callback module:api/DefaultApi~getPopularCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CollectionData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the most popular collections from the server
     * Gets the most popular collections from the server
     * @param {module:model/RangeParametersWithDate} body dateRange must be one of {'daily', 'weekly', 'monthly', 'all'}
     * @param {module:api/DefaultApi~getPopularCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CollectionData>}
     */
    this.getPopularCollections = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getPopularCollections");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CollectionData];

      return this.apiClient.callApi(
        '/collections/popular', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentCollections operation.
     * @callback module:api/DefaultApi~getRecentCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CollectionData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the most recent collections from the server
     * Gets the most recent collections from the server
     * @param {module:model/RequiredRangeParameters} range The below example retrieves 10 beatmaps with indices [20-29] in the most recent beatmaps list
     * @param {module:api/DefaultApi~getRecentCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CollectionData>}
     */
    this.getRecentCollections = function(range, callback) {
      var postBody = range;

      // verify the required parameter 'range' is set
      if (range === undefined || range === null) {
        throw new Error("Missing the required parameter 'range' when calling getRecentCollections");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CollectionData];

      return this.apiClient.callApi(
        '/collections/recent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserCollections operation.
     * @callback module:api/DefaultApi~getUserCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CollectionData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific user's collections
     * Gets a specific user's collections
     * @param {String} userId 
     * @param {module:model/RangeParameters} body Parameters
     * @param {module:api/DefaultApi~getUserCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CollectionData>}
     */
    this.getUserCollections = function(userId, body, callback) {
      var postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserCollections");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getUserCollections");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CollectionData];

      return this.apiClient.callApi(
        '/{userId}/collections', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the likeCollection operation.
     * @callback module:api/DefaultApi~likeCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Like a collection
     * Adds one like to a collection. Can also be used to remove an existing like
     * @param {Number} collectionId 
     * @param {module:model/LikeData} body By setting like: false, the like is removed if it exists.
     * @param {module:api/DefaultApi~likeCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.likeCollection = function(collectionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling likeCollection");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling likeCollection");
      }


      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/collections/{collectionId}/like', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCollectionComment operation.
     * @callback module:api/DefaultApi~postCollectionCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Posts a comment on a collection
     * Posts a comment on a collection
     * @param {Number} collectionId 
     * @param {module:model/CommentData} body TODO: allow guest comments
     * @param {module:api/DefaultApi~postCollectionCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postCollectionComment = function(collectionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling postCollectionComment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postCollectionComment");
      }


      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/collections/{collectionId}/comment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection operation.
     * @callback module:api/DefaultApi~updateCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a collection
     * Updates a collection
     * @param {Number} collectionId 
     * @param {module:model/CollectionUploadData} collectionData Data to update the collection with
     * @param {module:api/DefaultApi~updateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateCollection = function(collectionId, collectionData, callback) {
      var postBody = collectionData;

      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling updateCollection");
      }

      // verify the required parameter 'collectionData' is set
      if (collectionData === undefined || collectionData === null) {
        throw new Error("Missing the required parameter 'collectionData' when calling updateCollection");
      }


      var pathParams = {
        'collectionId': collectionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/collections/{collectionId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadCollections operation.
     * @callback module:api/DefaultApi~uploadCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an array of collections to the server
     * If any collection already exists on the server (same uploader, same collection name), then the collection on the server is updated
     * @param {module:model/CollectionsUploadData} body Uploader metadata along with list of collections to upload
     * @param {module:api/DefaultApi~uploadCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.uploadCollections = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadCollections");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/collections/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
